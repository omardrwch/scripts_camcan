"""
This scripts reads the results in data_mf_out/camcan and organize them
for further analysis.

IMPORTANT:
 The following parameters must be set:
    - conditions (default = ['rest', 'task'])
    - sensor_type ('mag', 'grad' or 'EOG')


Available data:
    - unexisting_files (list): files that were not generated by the code that performs
                               MF analysis, due to some exception (I noticed exceptions
                               happen during ICA sometimes)
    - subjects_incomplete (list): subjects for which at least one file is missing

    - n_channels_list (list): number of channels available for each subject

    - mf_subjects (list): all subjects that are not in subjects_incomplete, that is
                          the ones who have all MF files available

    - n_subjects  = len(mf_subjects)

    - n_channels  = n_channels_list[0] # assuming all channels are present in all subjects

    - channels_picks (list): contains channels' numbers (as in raw fif files)

    - channels_names (list): contains channels' names (as in raw fif files)


    - all_hurst_rest     (array): shape (n_subjects, n_channels))


    - ch_name2number (dict): maps channel name to channel number

    - ch_name2index (dict): maps channel name to channel index, the index is useful
                            to access the arrays above, e.g. all_cumulants_rest

"""

import mf_config
import camcan_utils
import h5py
import numpy as np
import os.path as op

class MF_Results():
    """
    Stores data described above
    """
    def __init__(self):
        self.params = None
        self.sensor_type = None
        self.unexisting_files = None
        self.subjects_incomplete = None
        self.n_channels_list = None
        self.mf_subjects = None
        self.n_subjects = None
        self.n_channels = None
        self.channels_picks = None
        self.channels_names = None
        self.ch_name2number = None
        self.ch_name2index  = None

def get_results(sensor_type = 'mag', conditions = ['rest', 'task'], option = None):

    #-------------------------------------------------------------------------------
    # Parameters
    #-------------------------------------------------------------------------------
    # Subjects and conditions
    subjects = camcan_utils.subjects
    # conditions = ['rest', 'task'] #camcan_utils.kinds

    # MF parameters
    mf_params = mf_config.get_mf_params()
    # params_index = 0

    # Choose sensor type
    # sensor_type = 'mag'

    # Output folder
    mf_io_info = mf_config.get_io_info()
    camcan_output_dir = mf_io_info['camcan_output_dir'] + '_hurst'
    print(camcan_output_dir)
    #-------------------------------------------------------------------------------
    # Read files
    #-------------------------------------------------------------------------------

    # debug
    unexisting_files = []
    subjects_incomplete = [] # subjects with incomplete mf analysis
    n_channels_list = []
    #

    # dictionary to store results
    mf_results = {}

    for subject in subjects:
        mf_results[subject] = {}
        for condition in conditions:

            if sensor_type == 'mag':
                filename = op.join(camcan_output_dir,
                                   subject,
                                   condition + "_channel_%s_hurst.h5"%sensor_type)
            elif sensor_type == 'eog':
                filename = op.join(camcan_output_dir + '_eog',
                                   subject,
                                   condition + "_hurst_eog.h5")

            if op.isfile(filename):
                mf_results[subject][condition] = {}
                with h5py.File(filename, "r") as f:
                    hurst = f['hurst'][:]
                    log2_Sj_2 = f['log2_Sj_2'][:]
                    params = f['params'].value
                    picks_ch_names = [name.decode('ascii') for name in f['picks_ch_names'][:].squeeze()]
                    channels_picks = f['channels_picks'][:]
                    n_channels_list.append(len(picks_ch_names))

                    # store results in dictionary
                    mf_results[subject][condition]['hurst']         = hurst
                    mf_results[subject][condition]['log2_Sj_2']     = log2_Sj_2
                    mf_results[subject][condition]['channels_picks']= channels_picks
                    mf_results[subject][condition]['picks_ch_names']= picks_ch_names
            else:
                unexisting_files.append(filename)
                subjects_incomplete.append(subject)

    subjects_incomplete = list(set(subjects_incomplete))


    #-------------------------------------------------------------------------------
    # Organize data in arrays (easier to do averages etc)
    #-------------------------------------------------------------------------------

    # Subjects with all mf analysis computed
    mf_subjects = [s for s in subjects if s not in subjects_incomplete]
    n_subjects  = len(mf_subjects)

    n_channels  = n_channels_list[0] # assuming all channels are present in all subjects

    # Channels picks and names (assuming all subjects have the same set of channels)
    channels_picks = mf_results[mf_subjects[0]]['rest']['channels_picks']
    channels_names = mf_results[mf_subjects[0]]['rest']['picks_ch_names']

    # Cumulants, log-cumulants and hmin for rest/task
    all_hurst_rest     =   np.zeros((n_subjects, n_channels))
    all_log2_Sj_2_rest =   np.zeros((n_subjects, n_channels, 15))

    all_hurst_task      =  np.zeros((n_subjects, n_channels))
    all_log2_Sj_2_task =  np.zeros((n_subjects, n_channels, 15))


    for subject_idx, subject in enumerate(mf_subjects):
        for condition in conditions:
            hurst     = mf_results[subject][condition]['hurst']
            log2_Sj_2 = mf_results[subject][condition]['log2_Sj_2']

            if condition == 'rest':
                all_hurst_rest[subject_idx, :]        = hurst
                all_log2_Sj_2_rest[subject_idx, :, :] = log2_Sj_2
            if condition == 'task':
                all_hurst_task[subject_idx, :]        = hurst
                all_log2_Sj_2_task[subject_idx, :, :] = log2_Sj_2


    #-------------------------------------------------------------------------------
    # Some other useful data
    #-------------------------------------------------------------------------------
    ch_name2number = dict(zip(channels_names, channels_picks))
    ch_name2index  = dict( zip( channels_names, list(range(len(channels_picks))) ) )

    #-------------------------------------------------------------------------------
    # Store and return
    #-------------------------------------------------------------------------------
    results = MF_Results()
    results.params = params
    results.sensor_type = sensor_type
    results.unexisting_files = unexisting_files
    results.subjects_incomplete = subjects_incomplete
    results.n_channels_list = n_channels_list
    results.mf_subjects = mf_subjects
    results.n_subjects = n_subjects
    results.n_channels = n_channels
    results.channels_picks = channels_picks
    results.channels_names = channels_names
    results.ch_name2number = ch_name2number
    results.ch_name2index  = ch_name2index
    results.all_hurst_rest = all_hurst_rest
    results.all_hurst_task = all_hurst_task
    results.all_log2_Sj_2_rest = all_log2_Sj_2_rest
    results.all_log2_Sj_2_task = all_log2_Sj_2_task

    return results
